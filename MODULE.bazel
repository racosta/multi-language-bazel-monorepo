"""Multi-language Bazel Monorepo example"""

module(
    name = "multi_language_bazel_monorepo",
    version = "0.0.0",
)

bazel_dep(name = "aspect_bazel_lib", version = "2.8.1")
bazel_dep(name = "aspect_rules_jest", version = "0.22.0")
bazel_dep(name = "aspect_rules_js", version = "2.1.2")
bazel_dep(name = "bazel_env.bzl", version = "0.1.1")
bazel_dep(name = "gazelle", version = "0.40.0")
bazel_dep(name = "rules_go", version = "0.50.1")
bazel_dep(name = "rules_nodejs", version = "6.3.2")
bazel_dep(name = "rules_python", version = "1.0.0")
bazel_dep(name = "rules_rust", version = "0.56.0")


# Python

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    configure_coverage_tool = True,
    python_version = "3.8",
)
python.toolchain(
    configure_coverage_tool = True,
    python_version = "3.9",
)
python.toolchain(
    configure_coverage_tool = True,
    python_version = "3.10",
)
python.toolchain(
    configure_coverage_tool = True,
    # Only set when you have multiple toolchain versions.
    is_default = True,
    python_version = "3.11",
)
use_repo(
    python,
    "pythons_hub",
    python = "python_versions",
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pypi",
    python_version = "3.8",
    requirements_lock = "//third_party/python:requirements_lock_3_8.txt",
)
pip.parse(
    hub_name = "pypi",
    python_version = "3.9",
    requirements_lock = "//third_party/python:requirements_lock_3_9.txt",
)
pip.parse(
    hub_name = "pypi",
    python_version = "3.10",
    requirements_lock = "//third_party/python:requirements_lock_3_10.txt",
)
pip.parse(
    hub_name = "pypi",
    python_version = "3.11",
    requirements_lock = "//third_party/python:requirements_lock_3_11.txt",
)
use_repo(pip, "pypi")

# Go

go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(version = "1.23.3")

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_work = "//:go.work")
use_repo(
    go_deps,
    "com_github_gin_gonic_gin",
    "com_github_racosta_multi_language_bazel_monorepo_projects_go_hello_world",
)

# Node.js

# By default you get the node version from DEFAULT_NODE_VERSION in @rules_nodejs//nodejs:repositories.bzl
# Optionally you can pin a different node version:
node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node", dev_dependency = True)
node.toolchain(node_version = "22.11.0")

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)

npm.npm_translate_lock(
    name = "npm",
    npmrc = "//:.npmrc",
    pnpm_lock = "//:pnpm-lock.yaml",
    verify_node_modules_ignored = "//:.bazelignore",
)

use_repo(npm, "npm")

pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm")

# Allows developers to use the matching pnpm version, for example:
# bazel run -- @pnpm --dir /home/runner/work/rules_js/rules_js install
use_repo(pnpm, "pnpm")

# Rust

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(edition = "2021")
use_repo(rust, "rust_toolchains")

register_toolchains(
    "@rust_toolchains//:all",
)

crate = use_extension(
    "@rules_rust//crate_universe:extensions.bzl",
    "crate",
)
crate.from_cargo(
    name = "crates",
    cargo_lockfile = "//third_party/rust:Cargo.lock",
    manifests = ["//third_party/rust:Cargo.toml"],
)
use_repo(crate, "crates")

